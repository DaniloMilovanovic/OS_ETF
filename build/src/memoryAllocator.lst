GAS LISTING /tmp/ccXElbQr.s 			page 1


   1              		.file	"memoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15memoryAllocator9mem_allocEm
   9              	_ZN15memoryAllocator9mem_allocEm:
  10              	.LFB0:
  11              		.file 1 "src/memoryAllocator.cpp"
   1:src/memoryAllocator.cpp **** //
   2:src/memoryAllocator.cpp **** // Created by os on 5/9/24.
   3:src/memoryAllocator.cpp **** //
   4:src/memoryAllocator.cpp **** 
   5:src/memoryAllocator.cpp **** #include "../h/memoryAllocator.hpp"
   6:src/memoryAllocator.cpp **** 
   7:src/memoryAllocator.cpp **** memoryAllocator::blockHeader* memoryAllocator::freeMemHead = nullptr; //beginning of free memory li
   8:src/memoryAllocator.cpp **** 
   9:src/memoryAllocator.cpp **** void *memoryAllocator::mem_alloc(size_t size) {
  12              		.loc 1 9 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  21 000c 93070500 		mv	a5,a0
  10:src/memoryAllocator.cpp **** 
  11:src/memoryAllocator.cpp ****     if(freeMemHead == nullptr){//allocation of the required block and initialisation of the rest of
  22              		.loc 1 11 5
  23              	.LBB2:
  24              		.loc 1 11 20 is_stmt 0
  25 0010 17050000 		ld	a0,.LANCHOR0
  25      03350500 
  26              	.LVL1:
  27              		.loc 1 11 5
  28 0018 63060500 		beqz	a0,.L12
  29              	.LBE2:
  12:src/memoryAllocator.cpp **** 
  13:src/memoryAllocator.cpp ****         if((uint64)HEAP_START_ADDR + size * MEM_BLOCK_SIZE >= (uint64)HEAP_END_ADDR) return nullptr
  14:src/memoryAllocator.cpp **** 
  15:src/memoryAllocator.cpp ****         blockHeader* allocatedBlock = (blockHeader*)HEAP_START_ADDR;
  16:src/memoryAllocator.cpp ****         allocatedBlock->next = nullptr;
  17:src/memoryAllocator.cpp ****         allocatedBlock->size = size;
  18:src/memoryAllocator.cpp **** 
  19:src/memoryAllocator.cpp ****         freeMemHead = (blockHeader*)((uint64)HEAP_START_ADDR + size * MEM_BLOCK_SIZE);
  20:src/memoryAllocator.cpp ****         freeMemHead->next = nullptr;
  21:src/memoryAllocator.cpp ****         freeMemHead->size = (size_t)(((uint64)HEAP_END_ADDR - (uint64)HEAP_START_ADDR - size * MEM_
  22:src/memoryAllocator.cpp **** 
  23:src/memoryAllocator.cpp ****         return (void*)((uint64)allocatedBlock + sizeof(void*) + sizeof(size_t));
  24:src/memoryAllocator.cpp ****     }
  25:src/memoryAllocator.cpp **** 
  26:src/memoryAllocator.cpp ****     blockHeader* block = freeMemHead;//we search for the first free block - first fit
  27:src/memoryAllocator.cpp ****     blockHeader* prev = nullptr;
  30              		.loc 1 27 18
GAS LISTING /tmp/ccXElbQr.s 			page 2


  31 001c 93060000 		li	a3,0
  32 0020 6F004008 		j	.L2
  33              	.L12:
  34              	.LBB4:
  35              	.LBB3:
  13:src/memoryAllocator.cpp **** 
  36              		.loc 1 13 9 is_stmt 1
  13:src/memoryAllocator.cpp **** 
  37              		.loc 1 13 43 is_stmt 0
  38 0024 13966700 		slli	a2,a5,6
  13:src/memoryAllocator.cpp **** 
  39              		.loc 1 13 36
  40 0028 17070000 		la	a4,HEAP_START_ADDR
  40      03370700 
  41 0030 03370700 		ld	a4,0(a4)
  42 0034 B305E600 		add	a1,a2,a4
  13:src/memoryAllocator.cpp **** 
  43              		.loc 1 13 60
  44 0038 97060000 		la	a3,HEAP_END_ADDR
  44      83B60600 
  45 0040 83B60600 		ld	a3,0(a3)
  13:src/memoryAllocator.cpp **** 
  46              		.loc 1 13 9
  47 0044 63F2D50A 		bgeu	a1,a3,.L1
  15:src/memoryAllocator.cpp ****         allocatedBlock->next = nullptr;
  48              		.loc 1 15 9 is_stmt 1
  49              	.LVL2:
  16:src/memoryAllocator.cpp ****         allocatedBlock->size = size;
  50              		.loc 1 16 9
  16:src/memoryAllocator.cpp ****         allocatedBlock->size = size;
  51              		.loc 1 16 30 is_stmt 0
  52 0048 23300700 		sd	zero,0(a4)
  17:src/memoryAllocator.cpp **** 
  53              		.loc 1 17 9 is_stmt 1
  17:src/memoryAllocator.cpp **** 
  54              		.loc 1 17 30 is_stmt 0
  55 004c 2334F700 		sd	a5,8(a4)
  19:src/memoryAllocator.cpp ****         freeMemHead->next = nullptr;
  56              		.loc 1 19 9 is_stmt 1
  19:src/memoryAllocator.cpp ****         freeMemHead->next = nullptr;
  57              		.loc 1 19 62 is_stmt 0
  58 0050 17050000 		la	a0,HEAP_START_ADDR
  58      03350500 
  59 0058 83360500 		ld	a3,0(a0)
  60 005c B386C600 		add	a3,a3,a2
  19:src/memoryAllocator.cpp ****         freeMemHead->next = nullptr;
  61              		.loc 1 19 21
  62 0060 97050000 		lla	a1,.LANCHOR0
  62      93850500 
  63 0068 23B0D500 		sd	a3,0(a1)
  20:src/memoryAllocator.cpp ****         freeMemHead->size = (size_t)(((uint64)HEAP_END_ADDR - (uint64)HEAP_START_ADDR - size * MEM_
  64              		.loc 1 20 9 is_stmt 1
  20:src/memoryAllocator.cpp ****         freeMemHead->size = (size_t)(((uint64)HEAP_END_ADDR - (uint64)HEAP_START_ADDR - size * MEM_
  65              		.loc 1 20 27 is_stmt 0
  66 006c 23B00600 		sd	zero,0(a3)
  21:src/memoryAllocator.cpp **** 
  67              		.loc 1 21 9 is_stmt 1
GAS LISTING /tmp/ccXElbQr.s 			page 3


  21:src/memoryAllocator.cpp **** 
  68              		.loc 1 21 61 is_stmt 0
  69 0070 97070000 		la	a5,HEAP_END_ADDR
  69      83B70700 
  70              	.LVL3:
  71 0078 83B70700 		ld	a5,0(a5)
  72 007c 83360500 		ld	a3,0(a0)
  73 0080 B387D740 		sub	a5,a5,a3
  21:src/memoryAllocator.cpp **** 
  74              		.loc 1 21 87
  75 0084 B387C740 		sub	a5,a5,a2
  21:src/memoryAllocator.cpp **** 
  76              		.loc 1 21 22
  77 0088 83B60500 		ld	a3,0(a1)
  21:src/memoryAllocator.cpp **** 
  78              		.loc 1 21 112
  79 008c 93D76700 		srli	a5,a5,6
  21:src/memoryAllocator.cpp **** 
  80              		.loc 1 21 27
  81 0090 23B4F600 		sd	a5,8(a3)
  23:src/memoryAllocator.cpp ****     }
  82              		.loc 1 23 9 is_stmt 1
  23:src/memoryAllocator.cpp ****     }
  83              		.loc 1 23 63 is_stmt 0
  84 0094 13050701 		addi	a0,a4,16
  23:src/memoryAllocator.cpp ****     }
  85              		.loc 1 23 79
  86 0098 6F000005 		j	.L1
  87              	.LVL4:
  88              	.L13:
  89              	.LBE3:
  90              	.LBE4:
  28:src/memoryAllocator.cpp ****     for(;block != nullptr; prev = block, block = block->next){
  91              		.loc 1 28 5 is_stmt 1
  92              		.loc 1 28 33 is_stmt 0
  93 009c 93060500 		mv	a3,a0
  94              		.loc 1 28 48
  95 00a0 03350500 		ld	a0,0(a0)
  96              	.LVL5:
  97              	.L2:
  98              		.loc 1 28 5 is_stmt 1 discriminator 1
  99              		.loc 1 28 16 discriminator 1
 100 00a4 63060500 		beqz	a0,.L4
  29:src/memoryAllocator.cpp ****         if(block->size >= size) break;
 101              		.loc 1 29 9
 102              		.loc 1 29 19 is_stmt 0
 103 00a8 03378500 		ld	a4,8(a0)
 104              		.loc 1 29 9
 105 00ac E368F7FE 		bltu	a4,a5,.L13
 106              	.L4:
  30:src/memoryAllocator.cpp ****     }
  31:src/memoryAllocator.cpp **** 
  32:src/memoryAllocator.cpp ****     if(block == nullptr)return nullptr;//no free mem space left;
 107              		.loc 1 32 5 is_stmt 1
 108 00b0 630C0502 		beqz	a0,.L1
  33:src/memoryAllocator.cpp **** 
  34:src/memoryAllocator.cpp ****     //allocate the requested block
GAS LISTING /tmp/ccXElbQr.s 			page 4


  35:src/memoryAllocator.cpp ****     size_t remainingSize = block->size - size;
 109              		.loc 1 35 5
 110              		.loc 1 35 35 is_stmt 0
 111 00b4 03378500 		ld	a4,8(a0)
 112              		.loc 1 35 12
 113 00b8 3306F740 		sub	a2,a4,a5
 114              	.LVL6:
  36:src/memoryAllocator.cpp ****     if(remainingSize >= 1){//a fragment exists in the block that we want to allocate
 115              		.loc 1 36 5 is_stmt 1
 116              	.LBB5:
 117 00bc 6302F704 		beq	a4,a5,.L5
 118              	.LBB6:
  37:src/memoryAllocator.cpp ****         block->size = size;
 119              		.loc 1 37 9
 120              		.loc 1 37 21 is_stmt 0
 121 00c0 2334F500 		sd	a5,8(a0)
  38:src/memoryAllocator.cpp ****         blockHeader* newBlock = (blockHeader*)((uint64)block + size * MEM_BLOCK_SIZE);
 122              		.loc 1 38 9 is_stmt 1
 123              		.loc 1 38 69 is_stmt 0
 124 00c4 93976700 		slli	a5,a5,6
 125              	.LVL7:
 126              		.loc 1 38 62
 127 00c8 B307F500 		add	a5,a0,a5
 128              	.LVL8:
  39:src/memoryAllocator.cpp **** 
  40:src/memoryAllocator.cpp ****         if(prev)prev->next = newBlock;
 129              		.loc 1 40 9 is_stmt 1
 130 00cc 63840602 		beqz	a3,.L6
 131              		.loc 1 40 17 discriminator 1
 132              		.loc 1 40 28 is_stmt 0 discriminator 1
 133 00d0 23B0F600 		sd	a5,0(a3)
 134              	.LVL9:
 135              	.L7:
  41:src/memoryAllocator.cpp ****         else freeMemHead = newBlock;
  42:src/memoryAllocator.cpp **** 
  43:src/memoryAllocator.cpp ****         newBlock->next = block->next;
 136              		.loc 1 43 9 is_stmt 1
 137              		.loc 1 43 33 is_stmt 0
 138 00d4 03370500 		ld	a4,0(a0)
 139              		.loc 1 43 24
 140 00d8 23B0E700 		sd	a4,0(a5)
  44:src/memoryAllocator.cpp ****         newBlock->size = remainingSize;
 141              		.loc 1 44 9 is_stmt 1
 142              		.loc 1 44 24 is_stmt 0
 143 00dc 23B4C700 		sd	a2,8(a5)
 144              	.LVL10:
 145              	.L8:
 146              	.LBE6:
 147              	.LBE5:
  45:src/memoryAllocator.cpp **** 
  46:src/memoryAllocator.cpp ****     }
  47:src/memoryAllocator.cpp ****     else{//no remaining fragment in the block we want to allocate
  48:src/memoryAllocator.cpp ****         if(prev) prev->next = block->next;
  49:src/memoryAllocator.cpp ****         else freeMemHead = block->next;
  50:src/memoryAllocator.cpp ****     }
  51:src/memoryAllocator.cpp **** 
  52:src/memoryAllocator.cpp ****     block->next = nullptr; // the block is allocated, so it doesn't point to the next free segment
GAS LISTING /tmp/ccXElbQr.s 			page 5


 148              		.loc 1 52 5 is_stmt 1
 149              		.loc 1 52 17 is_stmt 0
 150 00e0 23300500 		sd	zero,0(a0)
  53:src/memoryAllocator.cpp **** 
  54:src/memoryAllocator.cpp ****     return (void*)((uint64)block + sizeof(void*) + sizeof(size_t));
 151              		.loc 1 54 5 is_stmt 1
 152              		.loc 1 54 50 is_stmt 0
 153 00e4 13050501 		addi	a0,a0,16
 154              	.LVL11:
 155              	.L1:
  55:src/memoryAllocator.cpp **** }
 156              		.loc 1 55 1
 157 00e8 03348100 		ld	s0,8(sp)
 158              		.cfi_remember_state
 159              		.cfi_restore 8
 160              		.cfi_def_cfa 2, 16
 161 00ec 13010101 		addi	sp,sp,16
 162              		.cfi_def_cfa_offset 0
 163 00f0 67800000 		jr	ra
 164              	.LVL12:
 165              	.L6:
 166              		.cfi_restore_state
 167              	.LBB8:
 168              	.LBB7:
  41:src/memoryAllocator.cpp **** 
 169              		.loc 1 41 14 is_stmt 1
  41:src/memoryAllocator.cpp **** 
 170              		.loc 1 41 26 is_stmt 0
 171 00f4 17070000 		sd	a5,.LANCHOR0,a4
 171      2330F700 
 172 00fc 6FF09FFD 		j	.L7
 173              	.LVL13:
 174              	.L5:
 175              	.LBE7:
  48:src/memoryAllocator.cpp ****         else freeMemHead = block->next;
 176              		.loc 1 48 9 is_stmt 1
 177 0100 63880600 		beqz	a3,.L9
  48:src/memoryAllocator.cpp ****         else freeMemHead = block->next;
 178              		.loc 1 48 18 discriminator 1
  48:src/memoryAllocator.cpp ****         else freeMemHead = block->next;
 179              		.loc 1 48 38 is_stmt 0 discriminator 1
 180 0104 83370500 		ld	a5,0(a0)
 181              	.LVL14:
  48:src/memoryAllocator.cpp ****         else freeMemHead = block->next;
 182              		.loc 1 48 29 discriminator 1
 183 0108 23B0F600 		sd	a5,0(a3)
 184 010c 6FF05FFD 		j	.L8
 185              	.LVL15:
 186              	.L9:
  49:src/memoryAllocator.cpp ****     }
 187              		.loc 1 49 14 is_stmt 1
  49:src/memoryAllocator.cpp ****     }
 188              		.loc 1 49 35 is_stmt 0
 189 0110 83370500 		ld	a5,0(a0)
 190              	.LVL16:
  49:src/memoryAllocator.cpp ****     }
 191              		.loc 1 49 26
GAS LISTING /tmp/ccXElbQr.s 			page 6


 192 0114 17070000 		sd	a5,.LANCHOR0,a4
 192      2330F700 
 193 011c 6FF05FFC 		j	.L8
 194              	.LBE8:
 195              		.cfi_endproc
 196              	.LFE0:
 198              		.align	2
 199              		.globl	_ZN15memoryAllocator9tryToJoinEPNS_11blockHeaderE
 201              	_ZN15memoryAllocator9tryToJoinEPNS_11blockHeaderE:
 202              	.LFB2:
  56:src/memoryAllocator.cpp **** 
  57:src/memoryAllocator.cpp **** int memoryAllocator::mem_free(void * addr) {
  58:src/memoryAllocator.cpp ****     addr = (void*)((uint64)addr - sizeof(size_t) - sizeof(void*));//we change the address so it poi
  59:src/memoryAllocator.cpp **** 
  60:src/memoryAllocator.cpp ****     if(addr < HEAP_START_ADDR || addr > (void*)((uint64)HEAP_END_ADDR - 64)) return -1; // these ad
  61:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
  62:src/memoryAllocator.cpp ****     blockHeader* curr = nullptr;
  63:src/memoryAllocator.cpp **** 
  64:src/memoryAllocator.cpp ****     if(freeMemHead && addr >= (void*)freeMemHead){//we search for the space where the new free segm
  65:src/memoryAllocator.cpp ****         for(curr = freeMemHead; curr->next != nullptr && addr >= (void*) curr->next; curr = curr->n
  66:src/memoryAllocator.cpp ****     }
  67:src/memoryAllocator.cpp **** 
  68:src/memoryAllocator.cpp ****     if(curr == bhAddr || (curr && (blockHeader*)((uint64)curr + curr->size * MEM_BLOCK_SIZE) > bhAd
  69:src/memoryAllocator.cpp **** 
  70:src/memoryAllocator.cpp ****     //we add the new segment after curr free segment
  71:src/memoryAllocator.cpp ****     blockHeader* newBlock = (blockHeader*)addr;
  72:src/memoryAllocator.cpp ****     if(curr) {
  73:src/memoryAllocator.cpp ****         newBlock->next = curr->next;
  74:src/memoryAllocator.cpp ****         curr->next = newBlock;
  75:src/memoryAllocator.cpp ****         }
  76:src/memoryAllocator.cpp ****     else {
  77:src/memoryAllocator.cpp ****         newBlock->next = freeMemHead;
  78:src/memoryAllocator.cpp ****         freeMemHead = newBlock;
  79:src/memoryAllocator.cpp ****     }
  80:src/memoryAllocator.cpp ****     //we check if we can merge previous or next segment with the added free segment
  81:src/memoryAllocator.cpp ****     tryToJoin(newBlock);
  82:src/memoryAllocator.cpp ****     tryToJoin(curr);
  83:src/memoryAllocator.cpp **** 
  84:src/memoryAllocator.cpp ****     return 0;
  85:src/memoryAllocator.cpp **** 
  86:src/memoryAllocator.cpp **** }
  87:src/memoryAllocator.cpp **** 
  88:src/memoryAllocator.cpp **** int memoryAllocator::tryToJoin(blockHeader* curr){ //join two blocks that are next to each other
 203              		.loc 1 88 50 is_stmt 1
 204              		.cfi_startproc
 205              	.LVL17:
 206 0120 130101FF 		addi	sp,sp,-16
 207              		.cfi_def_cfa_offset 16
 208 0124 23348100 		sd	s0,8(sp)
 209              		.cfi_offset 8, -8
 210 0128 13040101 		addi	s0,sp,16
 211              		.cfi_def_cfa 8, 0
  89:src/memoryAllocator.cpp ****     if(!curr) return 0;
 212              		.loc 1 89 5
 213 012c 63040504 		beqz	a0,.L16
  90:src/memoryAllocator.cpp ****     if(curr->next && (uint64)curr + curr->size * MEM_BLOCK_SIZE == (uint64)curr->next){
 214              		.loc 1 90 5
GAS LISTING /tmp/ccXElbQr.s 			page 7


 215              		.loc 1 90 14 is_stmt 0
 216 0130 83370500 		ld	a5,0(a0)
 217              		.loc 1 90 5
 218 0134 63840704 		beqz	a5,.L17
 219              		.loc 1 90 43 discriminator 1
 220 0138 83368500 		ld	a3,8(a0)
 221              		.loc 1 90 48 discriminator 1
 222 013c 13976600 		slli	a4,a3,6
 223              		.loc 1 90 35 discriminator 1
 224 0140 3307E500 		add	a4,a0,a4
 225              		.loc 1 90 19 discriminator 1
 226 0144 630AF700 		beq	a4,a5,.L20
  91:src/memoryAllocator.cpp ****         //remove the curr->next block
  92:src/memoryAllocator.cpp ****         curr->size += curr->next->size;
  93:src/memoryAllocator.cpp ****         curr->next = curr->next->next;
  94:src/memoryAllocator.cpp ****         return 1;
  95:src/memoryAllocator.cpp ****     }
  96:src/memoryAllocator.cpp ****     else return 0;
 227              		.loc 1 96 17
 228 0148 13050000 		li	a0,0
 229              	.LVL18:
 230              	.L15:
  97:src/memoryAllocator.cpp **** }
 231              		.loc 1 97 1
 232 014c 03348100 		ld	s0,8(sp)
 233              		.cfi_remember_state
 234              		.cfi_restore 8
 235              		.cfi_def_cfa 2, 16
 236 0150 13010101 		addi	sp,sp,16
 237              		.cfi_def_cfa_offset 0
 238 0154 67800000 		jr	ra
 239              	.LVL19:
 240              	.L20:
 241              		.cfi_restore_state
  92:src/memoryAllocator.cpp ****         curr->next = curr->next->next;
 242              		.loc 1 92 9 is_stmt 1
  92:src/memoryAllocator.cpp ****         curr->next = curr->next->next;
 243              		.loc 1 92 35 is_stmt 0
 244 0158 03B78700 		ld	a4,8(a5)
  92:src/memoryAllocator.cpp ****         curr->next = curr->next->next;
 245              		.loc 1 92 20
 246 015c B386E600 		add	a3,a3,a4
 247 0160 2334D500 		sd	a3,8(a0)
  93:src/memoryAllocator.cpp ****         return 1;
 248              		.loc 1 93 9 is_stmt 1
  93:src/memoryAllocator.cpp ****         return 1;
 249              		.loc 1 93 34 is_stmt 0
 250 0164 83B70700 		ld	a5,0(a5)
  93:src/memoryAllocator.cpp ****         return 1;
 251              		.loc 1 93 20
 252 0168 2330F500 		sd	a5,0(a0)
  94:src/memoryAllocator.cpp ****     }
 253              		.loc 1 94 9 is_stmt 1
  94:src/memoryAllocator.cpp ****     }
 254              		.loc 1 94 16 is_stmt 0
 255 016c 13051000 		li	a0,1
 256              	.LVL20:
GAS LISTING /tmp/ccXElbQr.s 			page 8


 257 0170 6FF0DFFD 		j	.L15
 258              	.LVL21:
 259              	.L16:
  89:src/memoryAllocator.cpp ****     if(curr->next && (uint64)curr + curr->size * MEM_BLOCK_SIZE == (uint64)curr->next){
 260              		.loc 1 89 22
 261 0174 13050000 		li	a0,0
 262              	.LVL22:
 263 0178 6FF05FFD 		j	.L15
 264              	.LVL23:
 265              	.L17:
  96:src/memoryAllocator.cpp **** }
 266              		.loc 1 96 17
 267 017c 13050000 		li	a0,0
 268              	.LVL24:
 269 0180 6FF0DFFC 		j	.L15
 270              		.cfi_endproc
 271              	.LFE2:
 273              		.align	2
 274              		.globl	_ZN15memoryAllocator8mem_freeEPv
 276              	_ZN15memoryAllocator8mem_freeEPv:
 277              	.LFB1:
  57:src/memoryAllocator.cpp ****     addr = (void*)((uint64)addr - sizeof(size_t) - sizeof(void*));//we change the address so it poi
 278              		.loc 1 57 44 is_stmt 1
 279              		.cfi_startproc
 280              	.LVL25:
 281 0184 13070500 		mv	a4,a0
  58:src/memoryAllocator.cpp **** 
 282              		.loc 1 58 5
  58:src/memoryAllocator.cpp **** 
 283              		.loc 1 58 50 is_stmt 0
 284 0188 130505FF 		addi	a0,a0,-16
 285              	.LVL26:
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 286              		.loc 1 60 5 is_stmt 1
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 287              		.loc 1 60 13 is_stmt 0
 288 018c 97070000 		la	a5,HEAP_START_ADDR
 288      83B70700 
 289 0194 83B70700 		ld	a5,0(a5)
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 290              		.loc 1 60 5
 291 0198 6362F50C 		bgtu	a5,a0,.L28
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 292              		.loc 1 60 71 discriminator 2
 293 019c 97070000 		la	a5,HEAP_END_ADDR
 293      83B70700 
 294 01a4 83B70700 		ld	a5,0(a5)
 295 01a8 938707FC 		addi	a5,a5,-64
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 296              		.loc 1 60 31 discriminator 2
 297 01ac 63ECA70A 		bltu	a5,a0,.L29
  57:src/memoryAllocator.cpp ****     addr = (void*)((uint64)addr - sizeof(size_t) - sizeof(void*));//we change the address so it poi
 298              		.loc 1 57 44
 299 01b0 130101FE 		addi	sp,sp,-32
 300              		.cfi_def_cfa_offset 32
 301 01b4 233C1100 		sd	ra,24(sp)
 302 01b8 23388100 		sd	s0,16(sp)
GAS LISTING /tmp/ccXElbQr.s 			page 9


 303 01bc 23349100 		sd	s1,8(sp)
 304              		.cfi_offset 1, -8
 305              		.cfi_offset 8, -16
 306              		.cfi_offset 9, -24
 307 01c0 13040102 		addi	s0,sp,32
 308              		.cfi_def_cfa 8, 0
  61:src/memoryAllocator.cpp ****     blockHeader* curr = nullptr;
 309              		.loc 1 61 5 is_stmt 1
 310              	.LVL27:
  62:src/memoryAllocator.cpp **** 
 311              		.loc 1 62 5
  64:src/memoryAllocator.cpp ****         for(curr = freeMemHead; curr->next != nullptr && addr >= (void*) curr->next; curr = curr->n
 312              		.loc 1 64 5
  64:src/memoryAllocator.cpp ****         for(curr = freeMemHead; curr->next != nullptr && addr >= (void*) curr->next; curr = curr->n
 313              		.loc 1 64 38 is_stmt 0
 314 01c4 97060000 		ld	a3,.LANCHOR0
 314      83B60600 
  64:src/memoryAllocator.cpp ****         for(curr = freeMemHead; curr->next != nullptr && addr >= (void*) curr->next; curr = curr->n
 315              		.loc 1 64 5
 316 01cc 63800602 		beqz	a3,.L30
  64:src/memoryAllocator.cpp ****         for(curr = freeMemHead; curr->next != nullptr && addr >= (void*) curr->next; curr = curr->n
 317              		.loc 1 64 20 discriminator 1
 318 01d0 6362D502 		bgtu	a3,a0,.L31
  65:src/memoryAllocator.cpp ****     }
 319              		.loc 1 65 18
 320 01d4 93870600 		mv	a5,a3
 321              	.LVL28:
 322              	.L24:
  65:src/memoryAllocator.cpp ****     }
 323              		.loc 1 65 55 is_stmt 1 discriminator 4
 324 01d8 93840700 		mv	s1,a5
  65:src/memoryAllocator.cpp ****     }
 325              		.loc 1 65 39 is_stmt 0 discriminator 4
 326 01dc 83B70700 		ld	a5,0(a5)
 327              	.LVL29:
  65:src/memoryAllocator.cpp ****     }
 328              		.loc 1 65 55 discriminator 4
 329 01e0 638C0700 		beqz	a5,.L23
  65:src/memoryAllocator.cpp ****     }
 330              		.loc 1 65 55 discriminator 2
 331 01e4 E37AF5FE 		bleu	a5,a0,.L24
 332 01e8 6F000001 		j	.L23
 333              	.LVL30:
 334              	.L30:
  62:src/memoryAllocator.cpp **** 
 335              		.loc 1 62 18
 336 01ec 93840600 		mv	s1,a3
 337 01f0 6F008000 		j	.L23
 338              	.L31:
 339 01f4 93040000 		li	s1,0
 340              	.LVL31:
 341              	.L23:
  68:src/memoryAllocator.cpp **** 
 342              		.loc 1 68 5 is_stmt 1
 343 01f8 638AA406 		beq	s1,a0,.L32
  68:src/memoryAllocator.cpp **** 
 344              		.loc 1 68 23 is_stmt 0 discriminator 2
GAS LISTING /tmp/ccXElbQr.s 			page 10


 345 01fc 638A0400 		beqz	s1,.L25
  68:src/memoryAllocator.cpp **** 
 346              		.loc 1 68 71 discriminator 3
 347 0200 83B78400 		ld	a5,8(s1)
  68:src/memoryAllocator.cpp **** 
 348              		.loc 1 68 76 discriminator 3
 349 0204 93976700 		slli	a5,a5,6
  68:src/memoryAllocator.cpp **** 
 350              		.loc 1 68 63 discriminator 3
 351 0208 B387F400 		add	a5,s1,a5
  68:src/memoryAllocator.cpp **** 
 352              		.loc 1 68 32 discriminator 3
 353 020c 6364F506 		bgtu	a5,a0,.L33
 354              	.L25:
  71:src/memoryAllocator.cpp ****     if(curr) {
 355              		.loc 1 71 5 is_stmt 1
 356              	.LVL32:
  72:src/memoryAllocator.cpp ****         newBlock->next = curr->next;
 357              		.loc 1 72 5
 358 0210 638E0402 		beqz	s1,.L26
  73:src/memoryAllocator.cpp ****         curr->next = newBlock;
 359              		.loc 1 73 9
  73:src/memoryAllocator.cpp ****         curr->next = newBlock;
 360              		.loc 1 73 32 is_stmt 0
 361 0214 83B70400 		ld	a5,0(s1)
  73:src/memoryAllocator.cpp ****         curr->next = newBlock;
 362              		.loc 1 73 24
 363 0218 2338F7FE 		sd	a5,-16(a4)
  74:src/memoryAllocator.cpp ****         }
 364              		.loc 1 74 9 is_stmt 1
  74:src/memoryAllocator.cpp ****         }
 365              		.loc 1 74 20 is_stmt 0
 366 021c 23B0A400 		sd	a0,0(s1)
 367              	.L27:
  81:src/memoryAllocator.cpp ****     tryToJoin(curr);
 368              		.loc 1 81 5 is_stmt 1
  81:src/memoryAllocator.cpp ****     tryToJoin(curr);
 369              		.loc 1 81 14 is_stmt 0
 370 0220 97000000 		call	_ZN15memoryAllocator9tryToJoinEPNS_11blockHeaderE
 370      E7800000 
 371              	.LVL33:
  82:src/memoryAllocator.cpp **** 
 372              		.loc 1 82 5 is_stmt 1
  82:src/memoryAllocator.cpp **** 
 373              		.loc 1 82 14 is_stmt 0
 374 0228 13850400 		mv	a0,s1
 375 022c 97000000 		call	_ZN15memoryAllocator9tryToJoinEPNS_11blockHeaderE
 375      E7800000 
 376              	.LVL34:
  84:src/memoryAllocator.cpp **** 
 377              		.loc 1 84 5 is_stmt 1
  84:src/memoryAllocator.cpp **** 
 378              		.loc 1 84 12 is_stmt 0
 379 0234 13050000 		li	a0,0
 380              	.LVL35:
 381              	.L22:
  86:src/memoryAllocator.cpp **** 
GAS LISTING /tmp/ccXElbQr.s 			page 11


 382              		.loc 1 86 1
 383 0238 83308101 		ld	ra,24(sp)
 384              		.cfi_remember_state
 385              		.cfi_restore 1
 386 023c 03340101 		ld	s0,16(sp)
 387              		.cfi_restore 8
 388              		.cfi_def_cfa 2, 32
 389 0240 83348100 		ld	s1,8(sp)
 390              		.cfi_restore 9
 391              	.LVL36:
 392 0244 13010102 		addi	sp,sp,32
 393              		.cfi_def_cfa_offset 0
 394 0248 67800000 		jr	ra
 395              	.LVL37:
 396              	.L26:
 397              		.cfi_restore_state
  77:src/memoryAllocator.cpp ****         freeMemHead = newBlock;
 398              		.loc 1 77 9 is_stmt 1
  77:src/memoryAllocator.cpp ****         freeMemHead = newBlock;
 399              		.loc 1 77 24 is_stmt 0
 400 024c 2338D7FE 		sd	a3,-16(a4)
  78:src/memoryAllocator.cpp ****     }
 401              		.loc 1 78 9 is_stmt 1
  78:src/memoryAllocator.cpp ****     }
 402              		.loc 1 78 21 is_stmt 0
 403 0250 97070000 		sd	a0,.LANCHOR0,a5
 403      23B0A700 
 404 0258 6FF09FFC 		j	.L27
 405              	.LVL38:
 406              	.L28:
 407              		.cfi_def_cfa_register 2
 408              		.cfi_restore 1
 409              		.cfi_restore 8
 410              		.cfi_restore 9
  60:src/memoryAllocator.cpp ****     blockHeader* bhAddr = (blockHeader*)addr;
 411              		.loc 1 60 86
 412 025c 1305F0FF 		li	a0,-1
 413              	.LVL39:
 414 0260 67800000 		ret
 415              	.LVL40:
 416              	.L29:
 417 0264 1305F0FF 		li	a0,-1
 418              	.LVL41:
  86:src/memoryAllocator.cpp **** 
 419              		.loc 1 86 1
 420 0268 67800000 		ret
 421              	.LVL42:
 422              	.L32:
 423              		.cfi_def_cfa_register 8
 424              		.cfi_offset 1, -8
 425              		.cfi_offset 8, -16
 426              		.cfi_offset 9, -24
  68:src/memoryAllocator.cpp **** 
 427              		.loc 1 68 114
 428 026c 1305E0FF 		li	a0,-2
 429              	.LVL43:
 430 0270 6FF09FFC 		j	.L22
GAS LISTING /tmp/ccXElbQr.s 			page 12


 431              	.LVL44:
 432              	.L33:
 433 0274 1305E0FF 		li	a0,-2
 434              	.LVL45:
 435 0278 6FF01FFC 		j	.L22
 436              		.cfi_endproc
 437              	.LFE1:
 439              		.globl	_ZN15memoryAllocator11freeMemHeadE
 440              		.bss
 441              		.align	3
 442              		.set	.LANCHOR0,. + 0
 445              	_ZN15memoryAllocator11freeMemHeadE:
 446 0000 00000000 		.zero	8
 446      00000000 
 447              		.text
 448              	.Letext0:
 449              		.file 2 "src/../h/../lib/hw.h"
 450              		.file 3 "src/../h/memoryAllocator.hpp"
GAS LISTING /tmp/ccXElbQr.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memoryAllocator.cpp
     /tmp/ccXElbQr.s:9      .text:0000000000000000 _ZN15memoryAllocator9mem_allocEm
     /tmp/ccXElbQr.s:13     .text:0000000000000000 .L0 
     /tmp/ccXElbQr.s:15     .text:0000000000000000 .L0 
     /tmp/ccXElbQr.s:16     .text:0000000000000004 .L0 
     /tmp/ccXElbQr.s:18     .text:0000000000000008 .L0 
     /tmp/ccXElbQr.s:20     .text:000000000000000c .L0 
     /tmp/ccXElbQr.s:24     .text:0000000000000010 .L0 
     /tmp/ccXElbQr.s:25     .text:0000000000000010 .L0 
     /tmp/ccXElbQr.s:28     .text:0000000000000018 .L0 
     /tmp/ccXElbQr.s:31     .text:000000000000001c .L0 
     /tmp/ccXElbQr.s:37     .text:0000000000000024 .L0 
     /tmp/ccXElbQr.s:38     .text:0000000000000024 .L0 
     /tmp/ccXElbQr.s:40     .text:0000000000000028 .L0 
     /tmp/ccXElbQr.s:44     .text:0000000000000038 .L0 
     /tmp/ccXElbQr.s:47     .text:0000000000000044 .L0 
     /tmp/ccXElbQr.s:50     .text:0000000000000048 .L0 
     /tmp/ccXElbQr.s:51     .text:0000000000000048 .L0 
     /tmp/ccXElbQr.s:52     .text:0000000000000048 .L0 
     /tmp/ccXElbQr.s:54     .text:000000000000004c .L0 
     /tmp/ccXElbQr.s:55     .text:000000000000004c .L0 
     /tmp/ccXElbQr.s:57     .text:0000000000000050 .L0 
     /tmp/ccXElbQr.s:58     .text:0000000000000050 .L0 
     /tmp/ccXElbQr.s:62     .text:0000000000000060 .L0 
     /tmp/ccXElbQr.s:65     .text:000000000000006c .L0 
     /tmp/ccXElbQr.s:66     .text:000000000000006c .L0 
     /tmp/ccXElbQr.s:68     .text:0000000000000070 .L0 
     /tmp/ccXElbQr.s:69     .text:0000000000000070 .L0 
     /tmp/ccXElbQr.s:75     .text:0000000000000084 .L0 
     /tmp/ccXElbQr.s:77     .text:0000000000000088 .L0 
     /tmp/ccXElbQr.s:79     .text:000000000000008c .L0 
     /tmp/ccXElbQr.s:81     .text:0000000000000090 .L0 
     /tmp/ccXElbQr.s:83     .text:0000000000000094 .L0 
     /tmp/ccXElbQr.s:84     .text:0000000000000094 .L0 
     /tmp/ccXElbQr.s:86     .text:0000000000000098 .L0 
     /tmp/ccXElbQr.s:92     .text:000000000000009c .L0 
     /tmp/ccXElbQr.s:93     .text:000000000000009c .L0 
     /tmp/ccXElbQr.s:95     .text:00000000000000a0 .L0 
     /tmp/ccXElbQr.s:99     .text:00000000000000a4 .L0 
     /tmp/ccXElbQr.s:100    .text:00000000000000a4 .L0 
     /tmp/ccXElbQr.s:102    .text:00000000000000a8 .L0 
     /tmp/ccXElbQr.s:103    .text:00000000000000a8 .L0 
     /tmp/ccXElbQr.s:105    .text:00000000000000ac .L0 
     /tmp/ccXElbQr.s:108    .text:00000000000000b0 .L0 
     /tmp/ccXElbQr.s:110    .text:00000000000000b4 .L0 
     /tmp/ccXElbQr.s:111    .text:00000000000000b4 .L0 
     /tmp/ccXElbQr.s:113    .text:00000000000000b8 .L0 
     /tmp/ccXElbQr.s:117    .text:00000000000000bc .L0 
     /tmp/ccXElbQr.s:120    .text:00000000000000c0 .L0 
     /tmp/ccXElbQr.s:121    .text:00000000000000c0 .L0 
     /tmp/ccXElbQr.s:123    .text:00000000000000c4 .L0 
     /tmp/ccXElbQr.s:124    .text:00000000000000c4 .L0 
     /tmp/ccXElbQr.s:127    .text:00000000000000c8 .L0 
     /tmp/ccXElbQr.s:130    .text:00000000000000cc .L0 
     /tmp/ccXElbQr.s:132    .text:00000000000000d0 .L0 
     /tmp/ccXElbQr.s:133    .text:00000000000000d0 .L0 
GAS LISTING /tmp/ccXElbQr.s 			page 14


     /tmp/ccXElbQr.s:137    .text:00000000000000d4 .L0 
     /tmp/ccXElbQr.s:138    .text:00000000000000d4 .L0 
     /tmp/ccXElbQr.s:140    .text:00000000000000d8 .L0 
     /tmp/ccXElbQr.s:142    .text:00000000000000dc .L0 
     /tmp/ccXElbQr.s:143    .text:00000000000000dc .L0 
     /tmp/ccXElbQr.s:149    .text:00000000000000e0 .L0 
     /tmp/ccXElbQr.s:150    .text:00000000000000e0 .L0 
     /tmp/ccXElbQr.s:152    .text:00000000000000e4 .L0 
     /tmp/ccXElbQr.s:153    .text:00000000000000e4 .L0 
     /tmp/ccXElbQr.s:157    .text:00000000000000e8 .L0 
     /tmp/ccXElbQr.s:158    .text:00000000000000ec .L0 
     /tmp/ccXElbQr.s:159    .text:00000000000000ec .L0 
     /tmp/ccXElbQr.s:160    .text:00000000000000ec .L0 
     /tmp/ccXElbQr.s:162    .text:00000000000000f0 .L0 
     /tmp/ccXElbQr.s:166    .text:00000000000000f4 .L0 
     /tmp/ccXElbQr.s:170    .text:00000000000000f4 .L0 
     /tmp/ccXElbQr.s:171    .text:00000000000000f4 .L0 
     /tmp/ccXElbQr.s:177    .text:0000000000000100 .L0 
     /tmp/ccXElbQr.s:179    .text:0000000000000104 .L0 
     /tmp/ccXElbQr.s:180    .text:0000000000000104 .L0 
     /tmp/ccXElbQr.s:183    .text:0000000000000108 .L0 
     /tmp/ccXElbQr.s:188    .text:0000000000000110 .L0 
     /tmp/ccXElbQr.s:189    .text:0000000000000110 .L0 
     /tmp/ccXElbQr.s:192    .text:0000000000000114 .L0 
     /tmp/ccXElbQr.s:195    .text:0000000000000120 .L0 
     /tmp/ccXElbQr.s:201    .text:0000000000000120 _ZN15memoryAllocator9tryToJoinEPNS_11blockHeaderE
     /tmp/ccXElbQr.s:204    .text:0000000000000120 .L0 
     /tmp/ccXElbQr.s:206    .text:0000000000000120 .L0 
     /tmp/ccXElbQr.s:207    .text:0000000000000124 .L0 
     /tmp/ccXElbQr.s:209    .text:0000000000000128 .L0 
     /tmp/ccXElbQr.s:211    .text:000000000000012c .L0 
     /tmp/ccXElbQr.s:213    .text:000000000000012c .L0 
     /tmp/ccXElbQr.s:215    .text:0000000000000130 .L0 
     /tmp/ccXElbQr.s:216    .text:0000000000000130 .L0 
     /tmp/ccXElbQr.s:218    .text:0000000000000134 .L0 
     /tmp/ccXElbQr.s:220    .text:0000000000000138 .L0 
     /tmp/ccXElbQr.s:222    .text:000000000000013c .L0 
     /tmp/ccXElbQr.s:224    .text:0000000000000140 .L0 
     /tmp/ccXElbQr.s:226    .text:0000000000000144 .L0 
     /tmp/ccXElbQr.s:228    .text:0000000000000148 .L0 
     /tmp/ccXElbQr.s:232    .text:000000000000014c .L0 
     /tmp/ccXElbQr.s:233    .text:0000000000000150 .L0 
     /tmp/ccXElbQr.s:234    .text:0000000000000150 .L0 
     /tmp/ccXElbQr.s:235    .text:0000000000000150 .L0 
     /tmp/ccXElbQr.s:237    .text:0000000000000154 .L0 
     /tmp/ccXElbQr.s:241    .text:0000000000000158 .L0 
     /tmp/ccXElbQr.s:243    .text:0000000000000158 .L0 
     /tmp/ccXElbQr.s:244    .text:0000000000000158 .L0 
     /tmp/ccXElbQr.s:246    .text:000000000000015c .L0 
     /tmp/ccXElbQr.s:249    .text:0000000000000164 .L0 
     /tmp/ccXElbQr.s:250    .text:0000000000000164 .L0 
     /tmp/ccXElbQr.s:252    .text:0000000000000168 .L0 
     /tmp/ccXElbQr.s:254    .text:000000000000016c .L0 
     /tmp/ccXElbQr.s:255    .text:000000000000016c .L0 
     /tmp/ccXElbQr.s:261    .text:0000000000000174 .L0 
     /tmp/ccXElbQr.s:267    .text:000000000000017c .L0 
     /tmp/ccXElbQr.s:270    .text:0000000000000184 .L0 
GAS LISTING /tmp/ccXElbQr.s 			page 15


     /tmp/ccXElbQr.s:276    .text:0000000000000184 _ZN15memoryAllocator8mem_freeEPv
     /tmp/ccXElbQr.s:279    .text:0000000000000184 .L0 
     /tmp/ccXElbQr.s:281    .text:0000000000000184 .L0 
     /tmp/ccXElbQr.s:283    .text:0000000000000188 .L0 
     /tmp/ccXElbQr.s:284    .text:0000000000000188 .L0 
     /tmp/ccXElbQr.s:287    .text:000000000000018c .L0 
     /tmp/ccXElbQr.s:288    .text:000000000000018c .L0 
     /tmp/ccXElbQr.s:291    .text:0000000000000198 .L0 
     /tmp/ccXElbQr.s:293    .text:000000000000019c .L0 
     /tmp/ccXElbQr.s:297    .text:00000000000001ac .L0 
     /tmp/ccXElbQr.s:299    .text:00000000000001b0 .L0 
     /tmp/ccXElbQr.s:300    .text:00000000000001b4 .L0 
     /tmp/ccXElbQr.s:304    .text:00000000000001c0 .L0 
     /tmp/ccXElbQr.s:305    .text:00000000000001c0 .L0 
     /tmp/ccXElbQr.s:306    .text:00000000000001c0 .L0 
     /tmp/ccXElbQr.s:308    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:311    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:312    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:313    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:314    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:316    .text:00000000000001cc .L0 
     /tmp/ccXElbQr.s:318    .text:00000000000001d0 .L0 
     /tmp/ccXElbQr.s:320    .text:00000000000001d4 .L0 
     /tmp/ccXElbQr.s:324    .text:00000000000001d8 .L0 
     /tmp/ccXElbQr.s:326    .text:00000000000001dc .L0 
     /tmp/ccXElbQr.s:329    .text:00000000000001e0 .L0 
     /tmp/ccXElbQr.s:331    .text:00000000000001e4 .L0 
     /tmp/ccXElbQr.s:336    .text:00000000000001ec .L0 
     /tmp/ccXElbQr.s:343    .text:00000000000001f8 .L0 
     /tmp/ccXElbQr.s:345    .text:00000000000001fc .L0 
     /tmp/ccXElbQr.s:347    .text:0000000000000200 .L0 
     /tmp/ccXElbQr.s:349    .text:0000000000000204 .L0 
     /tmp/ccXElbQr.s:351    .text:0000000000000208 .L0 
     /tmp/ccXElbQr.s:353    .text:000000000000020c .L0 
     /tmp/ccXElbQr.s:357    .text:0000000000000210 .L0 
     /tmp/ccXElbQr.s:358    .text:0000000000000210 .L0 
     /tmp/ccXElbQr.s:360    .text:0000000000000214 .L0 
     /tmp/ccXElbQr.s:361    .text:0000000000000214 .L0 
     /tmp/ccXElbQr.s:363    .text:0000000000000218 .L0 
     /tmp/ccXElbQr.s:365    .text:000000000000021c .L0 
     /tmp/ccXElbQr.s:366    .text:000000000000021c .L0 
     /tmp/ccXElbQr.s:369    .text:0000000000000220 .L0 
     /tmp/ccXElbQr.s:370    .text:0000000000000220 .L0 
     /tmp/ccXElbQr.s:373    .text:0000000000000228 .L0 
     /tmp/ccXElbQr.s:374    .text:0000000000000228 .L0 
     /tmp/ccXElbQr.s:378    .text:0000000000000234 .L0 
     /tmp/ccXElbQr.s:379    .text:0000000000000234 .L0 
     /tmp/ccXElbQr.s:383    .text:0000000000000238 .L0 
     /tmp/ccXElbQr.s:384    .text:000000000000023c .L0 
     /tmp/ccXElbQr.s:385    .text:000000000000023c .L0 
     /tmp/ccXElbQr.s:387    .text:0000000000000240 .L0 
     /tmp/ccXElbQr.s:388    .text:0000000000000240 .L0 
     /tmp/ccXElbQr.s:390    .text:0000000000000244 .L0 
     /tmp/ccXElbQr.s:393    .text:0000000000000248 .L0 
     /tmp/ccXElbQr.s:397    .text:000000000000024c .L0 
     /tmp/ccXElbQr.s:399    .text:000000000000024c .L0 
     /tmp/ccXElbQr.s:400    .text:000000000000024c .L0 
GAS LISTING /tmp/ccXElbQr.s 			page 16


     /tmp/ccXElbQr.s:402    .text:0000000000000250 .L0 
     /tmp/ccXElbQr.s:403    .text:0000000000000250 .L0 
     /tmp/ccXElbQr.s:407    .text:000000000000025c .L0 
     /tmp/ccXElbQr.s:408    .text:000000000000025c .L0 
     /tmp/ccXElbQr.s:409    .text:000000000000025c .L0 
     /tmp/ccXElbQr.s:410    .text:000000000000025c .L0 
     /tmp/ccXElbQr.s:412    .text:000000000000025c .L0 
     /tmp/ccXElbQr.s:420    .text:0000000000000268 .L0 
     /tmp/ccXElbQr.s:423    .text:000000000000026c .L0 
     /tmp/ccXElbQr.s:424    .text:000000000000026c .L0 
     /tmp/ccXElbQr.s:425    .text:000000000000026c .L0 
     /tmp/ccXElbQr.s:426    .text:000000000000026c .L0 
     /tmp/ccXElbQr.s:428    .text:000000000000026c .L0 
     /tmp/ccXElbQr.s:436    .text:000000000000027c .L0 
     /tmp/ccXElbQr.s:445    .bss:0000000000000000 _ZN15memoryAllocator11freeMemHeadE
     /tmp/ccXElbQr.s:442    .bss:0000000000000000 .LANCHOR0
     /tmp/ccXElbQr.s:451    .text:000000000000027c .L0 
     /tmp/ccXElbQr.s:25     .text:0000000000000010 .L0 
     /tmp/ccXElbQr.s:40     .text:0000000000000028 .L0 
     /tmp/ccXElbQr.s:44     .text:0000000000000038 .L0 
     /tmp/ccXElbQr.s:58     .text:0000000000000050 .L0 
     /tmp/ccXElbQr.s:62     .text:0000000000000060 .L0 
     /tmp/ccXElbQr.s:69     .text:0000000000000070 .L0 
     /tmp/ccXElbQr.s:171    .text:00000000000000f4 .L0 
     /tmp/ccXElbQr.s:192    .text:0000000000000114 .L0 
     /tmp/ccXElbQr.s:288    .text:000000000000018c .L0 
     /tmp/ccXElbQr.s:293    .text:000000000000019c .L0 
     /tmp/ccXElbQr.s:314    .text:00000000000001c4 .L0 
     /tmp/ccXElbQr.s:403    .text:0000000000000250 .L0 
     /tmp/ccXElbQr.s:33     .text:0000000000000024 .L12
     /tmp/ccXElbQr.s:97     .text:00000000000000a4 .L2
     /tmp/ccXElbQr.s:155    .text:00000000000000e8 .L1
     /tmp/ccXElbQr.s:106    .text:00000000000000b0 .L4
     /tmp/ccXElbQr.s:88     .text:000000000000009c .L13
     /tmp/ccXElbQr.s:174    .text:0000000000000100 .L5
     /tmp/ccXElbQr.s:165    .text:00000000000000f4 .L6
     /tmp/ccXElbQr.s:135    .text:00000000000000d4 .L7
     /tmp/ccXElbQr.s:186    .text:0000000000000110 .L9
     /tmp/ccXElbQr.s:145    .text:00000000000000e0 .L8
     /tmp/ccXElbQr.s:259    .text:0000000000000174 .L16
     /tmp/ccXElbQr.s:265    .text:000000000000017c .L17
     /tmp/ccXElbQr.s:240    .text:0000000000000158 .L20
     /tmp/ccXElbQr.s:230    .text:000000000000014c .L15
     /tmp/ccXElbQr.s:406    .text:000000000000025c .L28
     /tmp/ccXElbQr.s:416    .text:0000000000000264 .L29
     /tmp/ccXElbQr.s:334    .text:00000000000001ec .L30
     /tmp/ccXElbQr.s:338    .text:00000000000001f4 .L31
     /tmp/ccXElbQr.s:341    .text:00000000000001f8 .L23
     /tmp/ccXElbQr.s:322    .text:00000000000001d8 .L24
     /tmp/ccXElbQr.s:422    .text:000000000000026c .L32
     /tmp/ccXElbQr.s:354    .text:0000000000000210 .L25
     /tmp/ccXElbQr.s:432    .text:0000000000000274 .L33
     /tmp/ccXElbQr.s:396    .text:000000000000024c .L26
     /tmp/ccXElbQr.s:367    .text:0000000000000220 .L27
     /tmp/ccXElbQr.s:381    .text:0000000000000238 .L22
     /tmp/ccXElbQr.s:795    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccXElbQr.s:1585   .debug_str:0000000000000142 .LASF31
GAS LISTING /tmp/ccXElbQr.s 			page 17


     /tmp/ccXElbQr.s:1583   .debug_str:000000000000012a .LASF32
     /tmp/ccXElbQr.s:1571   .debug_str:00000000000000af .LASF33
     /tmp/ccXElbQr.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccXElbQr.s:448    .text:000000000000027c .Letext0
     /tmp/ccXElbQr.s:1545   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccXElbQr.s:1591   .debug_str:0000000000000230 .LASF0
     /tmp/ccXElbQr.s:1579   .debug_str:000000000000010b .LASF1
     /tmp/ccXElbQr.s:1573   .debug_str:00000000000000ca .LASF2
     /tmp/ccXElbQr.s:1557   .debug_str:0000000000000032 .LASF4
     /tmp/ccXElbQr.s:1577   .debug_str:00000000000000f9 .LASF3
     /tmp/ccXElbQr.s:1549   .debug_str:0000000000000013 .LASF5
     /tmp/ccXElbQr.s:1547   .debug_str:0000000000000000 .LASF6
     /tmp/ccXElbQr.s:1567   .debug_str:0000000000000096 .LASF7
     /tmp/ccXElbQr.s:1597   .debug_str:0000000000000258 .LASF8
     /tmp/ccXElbQr.s:1555   .debug_str:0000000000000024 .LASF9
     /tmp/ccXElbQr.s:1625   .debug_str:0000000000000318 .LASF10
     /tmp/ccXElbQr.s:1595   .debug_str:0000000000000249 .LASF11
     /tmp/ccXElbQr.s:1615   .debug_str:00000000000002d3 .LASF12
     /tmp/ccXElbQr.s:1603   .debug_str:000000000000028a .LASF13
     /tmp/ccXElbQr.s:1581   .debug_str:000000000000011e .LASF14
     /tmp/ccXElbQr.s:1561   .debug_str:0000000000000049 .LASF15
     /tmp/ccXElbQr.s:1599   .debug_str:0000000000000268 .LASF16
     /tmp/ccXElbQr.s:1559   .debug_str:0000000000000039 .LASF34
     /tmp/ccXElbQr.s:1601   .debug_str:000000000000027e .LASF35
     /tmp/ccXElbQr.s:1551   .debug_str:000000000000001a .LASF17
     /tmp/ccXElbQr.s:1621   .debug_str:000000000000030e .LASF18
     /tmp/ccXElbQr.s:1619   .debug_str:0000000000000304 .LASF19
     /tmp/ccXElbQr.s:1575   .debug_str:00000000000000d8 .LASF21
     /tmp/ccXElbQr.s:1605   .debug_str:000000000000029a .LASF20
     /tmp/ccXElbQr.s:1617   .debug_str:00000000000002e3 .LASF22
     /tmp/ccXElbQr.s:1613   .debug_str:00000000000002c9 .LASF36
     /tmp/ccXElbQr.s:1563   .debug_str:000000000000005f .LASF37
     /tmp/ccXElbQr.s:1593   .debug_str:000000000000023d .LASF38
     /tmp/ccXElbQr.s:1587   .debug_str:0000000000000206 .LASF39
     /tmp/ccXElbQr.s:202    .text:0000000000000120 .LFB2
     /tmp/ccXElbQr.s:271    .text:0000000000000184 .LFE2
     /tmp/ccXElbQr.s:1553   .debug_str:000000000000001f .LASF23
     /tmp/ccXElbQr.s:1203   .debug_loc:0000000000000000 .LLST6
     /tmp/ccXElbQr.s:277    .text:0000000000000184 .LFB1
     /tmp/ccXElbQr.s:437    .text:000000000000027c .LFE1
     /tmp/ccXElbQr.s:1565   .debug_str:0000000000000091 .LASF24
     /tmp/ccXElbQr.s:1250   .debug_loc:00000000000000b4 .LLST7
     /tmp/ccXElbQr.s:1589   .debug_str:0000000000000229 .LASF25
     /tmp/ccXElbQr.s:1310   .debug_loc:00000000000001a2 .LLST8
     /tmp/ccXElbQr.s:1350   .debug_loc:0000000000000240 .LLST9
     /tmp/ccXElbQr.s:1611   .debug_str:00000000000002c0 .LASF26
     /tmp/ccXElbQr.s:1383   .debug_loc:00000000000002d7 .LLST10
     /tmp/ccXElbQr.s:371    .text:0000000000000228 .LVL33
     /tmp/ccXElbQr.s:376    .text:0000000000000234 .LVL34
     /tmp/ccXElbQr.s:10     .text:0000000000000000 .LFB0
     /tmp/ccXElbQr.s:196    .text:0000000000000120 .LFE0
     /tmp/ccXElbQr.s:1403   .debug_loc:0000000000000325 .LLST0
     /tmp/ccXElbQr.s:1569   .debug_str:00000000000000a9 .LASF27
     /tmp/ccXElbQr.s:1464   .debug_loc:0000000000000414 .LLST1
     /tmp/ccXElbQr.s:1623   .debug_str:0000000000000313 .LASF28
     /tmp/ccXElbQr.s:1480   .debug_loc:000000000000045e .LLST2
     /tmp/ccXElbQr.s:1607   .debug_str:00000000000002a3 .LASF29
GAS LISTING /tmp/ccXElbQr.s 			page 18


     /tmp/ccXElbQr.s:1495   .debug_loc:00000000000004a7 .LLST3
     /tmp/ccXElbQr.s:35     .text:0000000000000024 .LBB3
     /tmp/ccXElbQr.s:89     .text:000000000000009c .LBE3
     /tmp/ccXElbQr.s:1609   .debug_str:00000000000002b1 .LASF30
     /tmp/ccXElbQr.s:1506   .debug_loc:00000000000004dd .LLST4
     /tmp/ccXElbQr.s:1537   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccXElbQr.s:1513   .debug_loc:0000000000000500 .LLST5
     /tmp/ccXElbQr.s:205    .text:0000000000000120 .LVL17
     /tmp/ccXElbQr.s:229    .text:000000000000014c .LVL18
     /tmp/ccXElbQr.s:239    .text:0000000000000158 .LVL19
     /tmp/ccXElbQr.s:256    .text:0000000000000170 .LVL20
     /tmp/ccXElbQr.s:258    .text:0000000000000174 .LVL21
     /tmp/ccXElbQr.s:262    .text:0000000000000178 .LVL22
     /tmp/ccXElbQr.s:264    .text:000000000000017c .LVL23
     /tmp/ccXElbQr.s:268    .text:0000000000000180 .LVL24
     /tmp/ccXElbQr.s:280    .text:0000000000000184 .LVL25
     /tmp/ccXElbQr.s:285    .text:000000000000018c .LVL26
     /tmp/ccXElbQr.s:395    .text:000000000000024c .LVL37
     /tmp/ccXElbQr.s:413    .text:0000000000000260 .LVL39
     /tmp/ccXElbQr.s:415    .text:0000000000000264 .LVL40
     /tmp/ccXElbQr.s:418    .text:0000000000000268 .LVL41
     /tmp/ccXElbQr.s:421    .text:000000000000026c .LVL42
     /tmp/ccXElbQr.s:429    .text:0000000000000270 .LVL43
     /tmp/ccXElbQr.s:431    .text:0000000000000274 .LVL44
     /tmp/ccXElbQr.s:434    .text:0000000000000278 .LVL45
     /tmp/ccXElbQr.s:310    .text:00000000000001c4 .LVL27
     /tmp/ccXElbQr.s:405    .text:000000000000025c .LVL38
     /tmp/ccXElbQr.s:321    .text:00000000000001d8 .LVL28
     /tmp/ccXElbQr.s:327    .text:00000000000001e0 .LVL29
     /tmp/ccXElbQr.s:333    .text:00000000000001ec .LVL30
     /tmp/ccXElbQr.s:340    .text:00000000000001f8 .LVL31
     /tmp/ccXElbQr.s:391    .text:0000000000000244 .LVL36
     /tmp/ccXElbQr.s:356    .text:0000000000000210 .LVL32
     /tmp/ccXElbQr.s:380    .text:0000000000000238 .LVL35
     /tmp/ccXElbQr.s:14     .text:0000000000000000 .LVL0
     /tmp/ccXElbQr.s:26     .text:0000000000000018 .LVL1
     /tmp/ccXElbQr.s:70     .text:0000000000000078 .LVL3
     /tmp/ccXElbQr.s:87     .text:000000000000009c .LVL4
     /tmp/ccXElbQr.s:125    .text:00000000000000c8 .LVL7
     /tmp/ccXElbQr.s:134    .text:00000000000000d4 .LVL9
     /tmp/ccXElbQr.s:164    .text:00000000000000f4 .LVL12
     /tmp/ccXElbQr.s:173    .text:0000000000000100 .LVL13
     /tmp/ccXElbQr.s:181    .text:0000000000000108 .LVL14
     /tmp/ccXElbQr.s:185    .text:0000000000000110 .LVL15
     /tmp/ccXElbQr.s:190    .text:0000000000000114 .LVL16
     /tmp/ccXElbQr.s:96     .text:00000000000000a4 .LVL5
     /tmp/ccXElbQr.s:154    .text:00000000000000e8 .LVL11
     /tmp/ccXElbQr.s:114    .text:00000000000000bc .LVL6
     /tmp/ccXElbQr.s:49     .text:0000000000000048 .LVL2
     /tmp/ccXElbQr.s:128    .text:00000000000000cc .LVL8
     /tmp/ccXElbQr.s:144    .text:00000000000000e0 .LVL10
     /tmp/ccXElbQr.s:452    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccXElbQr.s:118    .text:00000000000000c0 .LBB6
     /tmp/ccXElbQr.s:146    .text:00000000000000e0 .LBE6
     /tmp/ccXElbQr.s:168    .text:00000000000000f4 .LBB7
     /tmp/ccXElbQr.s:175    .text:0000000000000100 .LBE7

GAS LISTING /tmp/ccXElbQr.s 			page 19


UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
